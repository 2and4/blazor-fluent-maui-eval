import{BrotliDecode}from"./js/external/decode.min.js";const cacheName="app-cache-672f93d0f04c466c939a658202a6b5d8",filesToCache=["/index.html","/404.html","/manifest.webmanifest","/_content/Blazor.App.Core/favicon.ico","/_content/Blazor.App.Core/img/background_dark.webp","/_content/Blazor.App.Core/img/background_light.webp","/_content/Blazor.App.Core/img/icons/icon-72x72.png","/_content/Blazor.Shared.Views/css/bfm-animations.css","/_content/Blazor.Shared.Views/css/bfm-scrollbars.css","/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js.LEGAL.txt","/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js.map","/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.nv5wbdzqw1.bundle.scp.css","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Anchor/FluentAnchor.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/AnchoredRegion/FluentAnchoredRegion.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Button/FluentButton.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Checkbox/FluentCheckbox.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/DataGrid/FluentDataGrid.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/DesignSystemProvider/FluentDesignTheme.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Divider/FluentDivider.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Grid/FluentGrid.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/HorizontalScroll/FluentHorizontalScroll.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/InputFile/FluentInputFile.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/KeyCode/FluentKeyCode.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Label/FluentInputLabel.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/List/FluentAutocomplete.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/List/FluentCombobox.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/List/ListComponentBase.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Menu/FluentMenu.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/NavMenu/FluentNavMenu.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Overflow/FluentOverflow.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Overlay/FluentOverlay.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/PullToRefresh/FluentPullToRefresh.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Search/FluentSearch.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Slider/FluentSlider.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Slider/FluentSliderLabel.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/SortableList/FluentSortableList.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Splitter/FluentMultiSplitter.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Tabs/FluentTab.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/TextField/FluentTextField.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/Components/Tooltip/FluentTooltip.razor.js","/_content/Microsoft.FluentUI.AspNetCore.Components/js/initializersLoader.webview.js","/_content/Microsoft.FluentUI.AspNetCore.Components/js/loading-theme.js","/css/styles.css","/img/icons/icon-192.png","/img/icons/icon-512.png","/js/index.js","/js/initialize.js","/js/external/decode.min.js"];self.addEventListener("install",(e=>{self.skipWaiting()})),self.addEventListener("activate",(e=>{const t=[cacheName];e.waitUntil(clients.claim().then((()=>caches.has(cacheName).then((e=>e?Promise.resolve():caches.open(cacheName).then((e=>e.addAll(filesToCache))))))).then((()=>caches.keys().then((e=>Promise.all(e.map((e=>{if(!t.includes(e))return caches.delete(e)}))))))))})),self.addEventListener("fetch",(e=>{e.respondWith(caches.match(e.request).then((t=>{if(t)return t;const o=e.request,n=new URL(o.url).pathname;if(!n.endsWith(".razor.js")&&n.endsWith(".js")||n.endsWith(".css")||n.endsWith(".wasm")||n.endsWith(".dat")){const e=new Request(o.url+".br",{method:o.method,headers:o.headers,mode:o.mode,credentials:o.credentials,redirect:o.redirect,referrer:o.referrer,integrity:o.integrity,cache:o.cache});return fetch(e).then((async e=>{if(e.ok){const t=await e.arrayBuffer(),o=new Int8Array(t),s=BrotliDecode(o);let r="application/octet-stream";return n.endsWith(".js")&&(r="text/javascript"),n.endsWith(".css")&&(r="text/css"),n.endsWith(".wasm")&&(r="application/wasm"),new Response(s,{headers:{"content-type":r}})}return fetch(o)})).catch((e=>(console.error("Fetch failed:",e),caches.match("/404.html"))))}return fetch(o).catch((e=>(console.error("Fetch failed:",e),caches.match("/404.html"))))})))}));